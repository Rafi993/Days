{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","Date","date","setDate","handleDate","useCallback","newDate","todayWithoutTime","moment","startOf","dateWithoutTime","className","onChange","value","format","disableClock","diff","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA4EeA,G,MAtEH,WAAO,IAAD,EACQC,mBAAS,IAAIC,MADrB,mBACTC,EADS,KACHC,EADG,KAEVC,EAAaC,uBACjB,SAAAC,GACEH,EAAQG,KAEV,CAACH,IAGGI,EAAmBC,MAASC,QAAQ,OACpCC,EAAkBF,IAAON,GAAMO,QAAQ,OAE7C,OACE,yBAAKE,UAAU,OACb,+CACA,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACEC,SAAUR,EACVS,MAAOX,EACPY,OAAO,oBACPC,cAAY,KAIhB,4BACE,0BAAMJ,UAAU,SACbJ,EAAiBS,KAAKN,EAAiB,UAF5C,SAOA,4BACE,0BAAMC,UAAU,SACbJ,EAAiBS,KAAKN,EAAiB,WAF5C,UAOA,4BACE,0BAAMC,UAAU,SACbJ,EAAiBS,KAAKN,EAAiB,UAF5C,SAOA,4BACE,0BAAMC,UAAU,SACbJ,EAAiBS,KAAKN,EAAiB,SAF5C,QAOA,4BACE,0BAAMC,UAAU,SAASH,MAASQ,KAAKR,IAAON,GAAO,UADvD,SAKA,4BACE,0BAAMS,UAAU,SAASH,MAASQ,KAAKR,IAAON,GAAO,YADvD,WAKA,4BACE,0BAAMS,UAAU,SAASH,MAASQ,KAAKR,IAAON,GAAO,YADvD,cCxDce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e20f181.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport moment from \"moment\";\n\nimport \"./date.css\";\n\nconst App = () => {\n  const [date, setDate] = useState(new Date());\n  const handleDate = useCallback(\n    newDate => {\n      setDate(newDate);\n    },\n    [setDate]\n  );\n\n  const todayWithoutTime = moment().startOf(\"day\");\n  const dateWithoutTime = moment(date).startOf(\"day\");\n\n  return (\n    <div className=\"app\">\n      <h2>Time past since</h2>\n      <div className=\"formgroup\">\n        <DateTimePicker\n          onChange={handleDate}\n          value={date}\n          format=\"y-MM-dd h:mm:ss a\"\n          disableClock\n        />\n      </div>\n\n      <h3>\n        <span className=\"value\">\n          {todayWithoutTime.diff(dateWithoutTime, \"years\")}\n        </span>\n        Years\n      </h3>\n\n      <h3>\n        <span className=\"value\">\n          {todayWithoutTime.diff(dateWithoutTime, \"months\")}\n        </span>\n        Months\n      </h3>\n\n      <h3>\n        <span className=\"value\">\n          {todayWithoutTime.diff(dateWithoutTime, \"weeks\")}\n        </span>\n        Weeks\n      </h3>\n\n      <h3>\n        <span className=\"value\">\n          {todayWithoutTime.diff(dateWithoutTime, \"days\")}\n        </span>\n        Days\n      </h3>\n\n      <h3>\n        <span className=\"value\">{moment().diff(moment(date), \"hours\")}</span>\n        Hours\n      </h3>\n\n      <h3>\n        <span className=\"value\">{moment().diff(moment(date), \"minutes\")}</span>\n        Minutes\n      </h3>\n\n      <h3>\n        <span className=\"value\">{moment().diff(moment(date), \"seconds\")}</span>\n        Seconds\n      </h3>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}